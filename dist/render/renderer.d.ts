import { ColorValue } from "./color.js";
interface Point {
    x: number;
    y: number;
}
declare class Renderer {
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    private transformStack;
    private prevArgs;
    width: number;
    height: number;
    constructor(canvasId?: string);
    resize(width: number, height: number): void;
    clear(c?: ColorValue): void;
    private parseArgs;
    rect(): void;
    rect(c: ColorValue): void;
    rect(x: number, y: number, w: number): void;
    rect(x: number, y: number, w: number, c: ColorValue): void;
    rect(x: number, y: number, w: number, h: number): void;
    rect(x: number, y: number, w: number, h: number, c?: ColorValue): void;
    strokeRect(): void;
    strokeRect(c: ColorValue): void;
    strokeRect(x: number, y: number, w: number): void;
    strokeRect(x: number, y: number, w: number, c: ColorValue): void;
    strokeRect(x: number, y: number, w: number, h: number): void;
    strokeRect(x: number, y: number, w: number, h: number, c?: ColorValue): void;
    roundedRect(pixels: number): void;
    roundedRect(pixels: number, c: ColorValue): void;
    roundedRect(pixels: number, x: number, y: number, w: number): void;
    roundedRect(pixels: number, x: number, y: number, w: number, c: ColorValue): void;
    roundedRect(pixels: number, x: number, y: number, w: number, h: number): void;
    roundedRect(pixels: number, x: number, y: number, w: number, h: number, c?: ColorValue): void;
    ellipse(): void;
    ellipse(c: ColorValue): void;
    ellipse(x: number, y: number, w: number): void;
    ellipse(x: number, y: number, w: number, c: ColorValue): void;
    ellipse(x: number, y: number, w: number, h: number): void;
    ellipse(x: number, y: number, w: number, h: number, c?: ColorValue): void;
    strokeEllipse(): void;
    strokeEllipse(c: ColorValue): void;
    strokeEllipse(x: number, y: number, w: number): void;
    strokeEllipse(x: number, y: number, w: number, c?: ColorValue): void;
    strokeEllipse(x: number, y: number, w: number, h: number): void;
    strokeEllipse(x: number, y: number, w: number, h: number, c?: ColorValue): void;
    dashedEllipse(x: number, y: number, w: number, h: number, dash: number[], c?: ColorValue): void;
    line(x: number, y: number, x2: number, y2: number, c?: ColorValue): void;
    text(msg: string, x: number, y: number, c?: ColorValue, fontSize?: number | string): void;
    measureText(msg: string, fontSize?: number | string): number;
    transform(x: number, y: number, r: number): void;
    revert(): void;
    debugObject(obj: any, x: number, y: number, c?: ColorValue): number;
    point(x: number, y: number, c?: ColorValue): void;
    roundCornerRect(x: number, y: number, w: number, h: number, r: number, c?: ColorValue): void;
    strokeRoundCornerRect(x: number, y: number, w: number, h: number, r: number, c?: ColorValue): void;
    path(points: Point[], c?: ColorValue): void;
    triangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, c: ColorValue): void;
    strokeTriangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, c: ColorValue): void;
    strokeWidth(w: number): void;
}
export { Renderer };
