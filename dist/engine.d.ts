import { Component } from "./entity/component.js";
import { Ctor, Entity } from "./entity/entity.js";
import { NetworkManager } from "./networking/client/networkManager.js";
import { Renderer } from "./render/renderer.js";
import { System } from "./system.js";
import { EventEmitter } from "./utils/eventEmitter.js";
import { Vector2 } from "./utils/vector2.js";
declare class GameEngine extends EventEmitter {
    static instance: GameEngine;
    renderer: Renderer;
    camera: Vector2;
    mouse: Vector2;
    private previousFrameTime;
    private lastFrameTimes;
    networking: NetworkManager;
    get fps(): number;
    entities: Entity[];
    world: Entity;
    keysDown: Record<string, boolean>;
    mouseButtonsDown: boolean[];
    private systems;
    debugEntityPos: boolean;
    private static nextId;
    static getNextId(): number;
    static skipIds(ids: number[]): void;
    constructor();
    init(renderTargetId: string): void;
    private addEventListeners;
    private updateTime;
    initializeNetworking(url: string): void;
    update(): void;
    resize(width: number, height: number): void;
    screenToWorld(pos: Vector2): Vector2;
    worldToScreen(pos: Vector2): Vector2;
    addSystem(system: System, loadOnAdd?: boolean): void;
    getSystem<T extends System>(type: Ctor<T>): T;
    removeSystem(system: System): void;
    createEntity(): Entity;
    getEntityById(id: number): Entity;
    getEntitiesByTag(tag: string): Entity[];
    getEntitiesWithComponent<T extends Component>(type: Ctor<T>): Entity[];
    getAllComponents<T extends Component>(type: Ctor<T>): T[];
}
export { GameEngine };
